// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Drive {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  location     String
  description  String
  status       String   @default("pending")
  dtype        String
  startDate    String
  EndDate      String
  timeInterval String
  geoLocation  Json?
  placeLink    String?
  photos       String[]
  createdAt    DateTime @default(now())
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userType       String   @default("individual")
  fullname       String?
  email          String   @unique
  password       String
  address        Address? @relation(fields: [addressId], references: [id])
  addressId      String?  @db.ObjectId
  avatar         String?
  mobile         String?
  createdAt      DateTime @default(now())
  otp            String?
  organizationId String?  @db.ObjectId
}

model Organization {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  orgId         String          @unique @default(uuid())
  name          String?         @unique
  email         String          @unique
  password      String
  contactPerson ContactPerson[]
  address       Address?        @relation(fields: [addressId], references: [id])
  addressId     String?         @db.ObjectId
  avatar        String?
  mobile        String?
  otp           String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ContactPerson {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String       @unique
  mobile         String?
  organizationId String       @db.ObjectId
  Organization   Organization @relation(fields: [organizationId], references: [id])
}

model Address {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  streetAddress  String
  addressLine2   String?
  city           String
  state          String
  postalCode     String
  country        String
  userId         String?        @db.ObjectId
  organizationId String?        @db.ObjectId
  User           User[]
  Organization   Organization[]
}

model DonationRequests {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullname  String
  mobile    String
  email     String
  address   String
  type      String
  quantity  String
  status    String   @default("Pending")
  createdAt DateTime @default(now())
}

model Certificates {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  donationId  String
  email       String
  type        String
  fullname    String
  mobile      String
  description String?
  createdAt   DateTime @default(now())
}

model Admin {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  role      String      @default("Admin")
  name      String
  email     String      @unique
  password  String
  mobile    String      @unique
  subAdmins SubAdmins[]
  createdAt DateTime    @default(now())
}

model SubAdmins {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String   @default("MiniAdmin")
  name      String
  email     String   @unique
  password  String
  mobile    String   @unique
  createdAt DateTime @default(now())
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?  @db.ObjectId
}
